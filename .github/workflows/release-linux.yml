name: Release Linux App

on:
    push:
      tags:
        - '*'

jobs:
  release:
    name: Release Linux App
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        platform:
          - linux/amd64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Normalise platform tag
        id: normalise_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalise version tag
        id: normalise_version
        shell: bash
        run: |
          version=$(echo ${{ github.event.release.tag_name }} | sed -e 's/v//g')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Ubuntu prerequisites
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Build frontend assets
        shell: bash
        run: |
          npm install -g npm@9
          jq '.info.productVersion = "${{ steps.normalise_version.outputs.version }}"' wails.json > tmp.json
          mv tmp.json wails.json
          cd frontend
          jq '.version = "${{ steps.normalise_version.outputs.version }}"' package.json > tmp.json
          mv tmp.json package.json
          npm install

      - name: Build wails app for Linux
        shell: bash
        run: CGO_ENABLED=1 wails build -platform ${{ matrix.platform }} -ldflags "-X main.version=${{ github.event.release.tag_name }}" -o hostseditor

      - name: Setup control template
        shell: bash
        run: |
          content=$(cat build/linux/DEBIAN/control)
          content=$(echo "$content" | sed -e "s/{{.Name}}/$(jq -r '.name' wails.json)/g")
          content=$(echo "$content" | sed -e "s/{{.Info.ProductVersion}}/$(jq -r '.info.productVersion' wails.json)/g")
          content=$(echo "$content" | sed -e "s/{{.Author.Name}}/$(jq -r '.author.name' wails.json)/g")
          content=$(echo "$content" | sed -e "s/{{.Author.Email}}/$(jq -r '.author.email' wails.json)/g")
          content=$(echo "$content" | sed -e "s/{{.Info.Comments}}/$(jq -r '.info.comments' wails.json)/g")
          echo $content
          echo "$content" > build/linux/DEBIAN/control

      - name: Setup app template
        shell: bash
        run: |
          content=$(cat build/linux/usr/share/applications/hostseditor.desktop)
          content=$(echo "$content" | sed -e "s/{{.Info.ProductName}}/$(jq -r '.info.productName' wails.json)/g")
          content=$(echo "$content" | sed -e "s/{{.Info.Comments}}/$(jq -r '.info.comments' wails.json)/g")
          echo $content
          echo "$content" > build/linux/usr/share/applications/hostseditor.desktop

      - name: Package up deb file
        shell: bash
        run: |
          mv build/bin/hostseditor build/linux/usr/local/bin/
          cd build/linux
          mv hostseditor "hostseditor_${{ steps.normalise_version.outputs.version }}_amd64"
          sed -i 's/0.0.0/${{ steps.normalise_version.outputs.version }}/g' "hostseditor_${{ steps.normalise_version.outputs.version }}_amd64/DEBIAN/control"
          dpkg-deb --build -Zxz "hostseditor_${{ steps.normalise_version.outputs.version }}_amd64"

      - name: Upload release asset
        shell: bash
        working-directory: ./build/linux/
        run: |
          filepath="hostseditor_${{ steps.normalise_version.outputs.version }}_amd64.deb"
          filename="hostseditor_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.deb"
          upload_url="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ github.event.release.id }}/assets"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/octet-stream" --data-binary @$filepath "$upload_url?name=$filename"
